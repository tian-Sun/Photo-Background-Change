{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 172, "column": 0}, "map": {"version":3,"sources":["file:///F:/project/WebTools/008_headshotGenerator/Photo-Background-Change/src/lib/supabase.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js';\r\n\r\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\r\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;\r\n\r\n// 检查 Supabase 是否配置\r\nexport const isSupabaseConfigured = supabaseUrl && supabaseAnonKey;\r\n\r\nexport const supabase = isSupabaseConfigured \r\n  ? createClient(supabaseUrl!, supabaseAnonKey!)\r\n  : null;\r\n\r\n// 内存存储回退（当 Supabase 未配置时使用）\r\nconst memoryStorage: Record<string, { count: number; date: string }> = {};\r\n\r\n// 数据库表接口\r\nexport interface UserUsage {\r\n  id?: number;\r\n  user_email: string;\r\n  usage_count: number;\r\n  usage_date: string;\r\n  created_at?: string;\r\n  updated_at?: string;\r\n}\r\n\r\nexport interface UserSubscription {\r\n  id?: number;\r\n  user_email: string;\r\n  plan_id: string;\r\n  credits: number;\r\n  status: 'active' | 'expired' | 'cancelled';\r\n  order_id?: string;\r\n  created_at?: string;\r\n  updated_at?: string;\r\n}\r\n\r\n// 获取或创建用户使用记录\r\nexport async function getUserUsage(userEmail: string, date: string): Promise<UserUsage | null> {\r\n  if (!isSupabaseConfigured) {\r\n    // 使用内存存储\r\n    const key = `${userEmail}_${date}`;\r\n    if (!memoryStorage[key] || memoryStorage[key].date !== date) {\r\n      memoryStorage[key] = { count: 0, date };\r\n    }\r\n    return {\r\n      user_email: userEmail,\r\n      usage_count: memoryStorage[key].count,\r\n      usage_date: date,\r\n    };\r\n  }\r\n\r\n  const { data, error } = await supabase!\r\n    .from('user_usage')\r\n    .select('*')\r\n    .eq('user_email', userEmail)\r\n    .eq('usage_date', date)\r\n    .single();\r\n\r\n  if (error && error.code !== 'PGRST116') { // PGRST116 = no rows found\r\n    console.error('Error fetching user usage:', error);\r\n    return null;\r\n  }\r\n\r\n  return data;\r\n}\r\n\r\n// 创建用户使用记录\r\nexport async function createUserUsage(userEmail: string, date: string): Promise<UserUsage | null> {\r\n  if (!isSupabaseConfigured) {\r\n    // 使用内存存储\r\n    const key = `${userEmail}_${date}`;\r\n    memoryStorage[key] = { count: 0, date };\r\n    return {\r\n      user_email: userEmail,\r\n      usage_count: 0,\r\n      usage_date: date,\r\n    };\r\n  }\r\n\r\n  const { data, error } = await supabase!\r\n    .from('user_usage')\r\n    .insert([\r\n      {\r\n        user_email: userEmail,\r\n        usage_count: 0,\r\n        usage_date: date,\r\n      }\r\n    ])\r\n    .select()\r\n    .single();\r\n\r\n  if (error) {\r\n    console.error('Error creating user usage:', error);\r\n    return null;\r\n  }\r\n\r\n  return data;\r\n}\r\n\r\n// 更新用户使用次数\r\nexport async function updateUserUsage(userEmail: string, date: string, newCount: number): Promise<boolean> {\r\n  if (!isSupabaseConfigured) {\r\n    // 使用内存存储\r\n    const key = `${userEmail}_${date}`;\r\n    if (memoryStorage[key]) {\r\n      memoryStorage[key].count = newCount;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  const { error } = await supabase!\r\n    .from('user_usage')\r\n    .update({ usage_count: newCount, updated_at: new Date().toISOString() })\r\n    .eq('user_email', userEmail)\r\n    .eq('usage_date', date);\r\n\r\n  if (error) {\r\n    console.error('Error updating user usage:', error);\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n// 获取用户订阅信息\r\nexport async function getUserSubscription(userEmail: string): Promise<UserSubscription | null> {\r\n  if (!isSupabaseConfigured) {\r\n    // 开发环境默认给Premium订阅\r\n    return {\r\n      user_email: userEmail,\r\n      plan_id: 'premium',\r\n      credits: 100,\r\n      status: 'active'\r\n    };\r\n  }\r\n\r\n  const { data, error } = await supabase!\r\n    .from('user_subscriptions')\r\n    .select('*')\r\n    .eq('user_email', userEmail)\r\n    .eq('status', 'active')\r\n    .single();\r\n\r\n  if (error && error.code !== 'PGRST116') {\r\n    console.error('Error fetching user subscription:', error);\r\n    return null;\r\n  }\r\n\r\n  return data;\r\n}\r\n\r\n// 创建或更新用户订阅\r\nexport async function createOrUpdateUserSubscription(params: {\r\n  email: string;\r\n  planId: string;\r\n  credits: number;\r\n  orderId?: string;\r\n}): Promise<{ success: boolean; error?: string }> {\r\n  const { email, planId, credits, orderId } = params;\r\n\r\n  if (!isSupabaseConfigured) {\r\n    console.log('✅ Supabase not configured, subscription created in memory');\r\n    return { success: true };\r\n  }\r\n\r\n  try {\r\n    // 首先检查是否已有活跃订阅\r\n    const existingSubscription = await getUserSubscription(email);\r\n    \r\n    if (existingSubscription) {\r\n      // 更新现有订阅的积分\r\n      const { error } = await supabase!\r\n        .from('user_subscriptions')\r\n        .update({\r\n          credits: existingSubscription.credits + credits,\r\n          updated_at: new Date().toISOString()\r\n        })\r\n        .eq('user_email', email)\r\n        .eq('status', 'active');\r\n\r\n      if (error) {\r\n        console.error('Error updating subscription:', error);\r\n        return { success: false, error: error.message };\r\n      }\r\n    } else {\r\n      // 创建新订阅\r\n      const { error } = await supabase!\r\n        .from('user_subscriptions')\r\n        .insert([{\r\n          user_email: email,\r\n          plan_id: planId,\r\n          credits: credits,\r\n          status: 'active',\r\n          order_id: orderId\r\n        }]);\r\n\r\n      if (error) {\r\n        console.error('Error creating subscription:', error);\r\n        return { success: false, error: error.message };\r\n      }\r\n    }\r\n\r\n    return { success: true };\r\n  } catch (error) {\r\n    console.error('Unexpected error in createOrUpdateUserSubscription:', error);\r\n    return { success: false, error: 'Unexpected error occurred' };\r\n  }\r\n}\r\n\r\n// 更新用户订阅积分\r\nexport async function updateUserSubscriptionCredits(\r\n  userEmail: string, \r\n  newCredits: number\r\n): Promise<{ success: boolean; error?: string }> {\r\n  if (!isSupabaseConfigured) {\r\n    console.log('✅ Supabase not configured, credits updated in memory');\r\n    return { success: true };\r\n  }\r\n\r\n  try {\r\n    const { error } = await supabase!\r\n      .from('user_subscriptions')\r\n      .update({\r\n        credits: newCredits,\r\n        updated_at: new Date().toISOString()\r\n      })\r\n      .eq('user_email', userEmail)\r\n      .eq('status', 'active');\r\n\r\n    if (error) {\r\n      console.error('Error updating subscription credits:', error);\r\n      return { success: false, error: error.message };\r\n    }\r\n\r\n    return { success: true };\r\n  } catch (error) {\r\n    console.error('Unexpected error in updateUserSubscriptionCredits:', error);\r\n    return { success: false, error: 'Unexpected error occurred' };\r\n  }\r\n} "],"names":[],"mappings":";;;;;;;;;;AAAA;;AAEA,MAAM;AACN,MAAM;AAGC,MAAM,uBAAuB,eAAe;AAE5C,MAAM,WAAW,uCACpB,CAAA,GAAA,yLAAA,CAAA,eAAY,AAAD,EAAE,aAAc;AAG/B,4BAA4B;AAC5B,MAAM,gBAAiE,CAAC;AAwBjE,eAAe,aAAa,SAAiB,EAAE,IAAY;IAChE,uCAA2B;;IAW3B;IAEA,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,SAC3B,IAAI,CAAC,cACL,MAAM,CAAC,KACP,EAAE,CAAC,cAAc,WACjB,EAAE,CAAC,cAAc,MACjB,MAAM;IAET,IAAI,SAAS,MAAM,IAAI,KAAK,YAAY;QACtC,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,OAAO;IACT;IAEA,OAAO;AACT;AAGO,eAAe,gBAAgB,SAAiB,EAAE,IAAY;IACnE,uCAA2B;;IAS3B;IAEA,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,SAC3B,IAAI,CAAC,cACL,MAAM,CAAC;QACN;YACE,YAAY;YACZ,aAAa;YACb,YAAY;QACd;KACD,EACA,MAAM,GACN,MAAM;IAET,IAAI,OAAO;QACT,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,OAAO;IACT;IAEA,OAAO;AACT;AAGO,eAAe,gBAAgB,SAAiB,EAAE,IAAY,EAAE,QAAgB;IACrF,uCAA2B;;IAO3B;IAEA,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,SACrB,IAAI,CAAC,cACL,MAAM,CAAC;QAAE,aAAa;QAAU,YAAY,IAAI,OAAO,WAAW;IAAG,GACrE,EAAE,CAAC,cAAc,WACjB,EAAE,CAAC,cAAc;IAEpB,IAAI,OAAO;QACT,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,OAAO;IACT;IAEA,OAAO;AACT;AAGO,eAAe,oBAAoB,SAAiB;IACzD,uCAA2B;;IAQ3B;IAEA,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,SAC3B,IAAI,CAAC,sBACL,MAAM,CAAC,KACP,EAAE,CAAC,cAAc,WACjB,EAAE,CAAC,UAAU,UACb,MAAM;IAET,IAAI,SAAS,MAAM,IAAI,KAAK,YAAY;QACtC,QAAQ,KAAK,CAAC,qCAAqC;QACnD,OAAO;IACT;IAEA,OAAO;AACT;AAGO,eAAe,+BAA+B,MAKpD;IACC,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,GAAG;IAE5C,uCAA2B;;IAG3B;IAEA,IAAI;QACF,eAAe;QACf,MAAM,uBAAuB,MAAM,oBAAoB;QAEvD,IAAI,sBAAsB;YACxB,YAAY;YACZ,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,SACrB,IAAI,CAAC,sBACL,MAAM,CAAC;gBACN,SAAS,qBAAqB,OAAO,GAAG;gBACxC,YAAY,IAAI,OAAO,WAAW;YACpC,GACC,EAAE,CAAC,cAAc,OACjB,EAAE,CAAC,UAAU;YAEhB,IAAI,OAAO;gBACT,QAAQ,KAAK,CAAC,gCAAgC;gBAC9C,OAAO;oBAAE,SAAS;oBAAO,OAAO,MAAM,OAAO;gBAAC;YAChD;QACF,OAAO;YACL,QAAQ;YACR,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,SACrB,IAAI,CAAC,sBACL,MAAM,CAAC;gBAAC;oBACP,YAAY;oBACZ,SAAS;oBACT,SAAS;oBACT,QAAQ;oBACR,UAAU;gBACZ;aAAE;YAEJ,IAAI,OAAO;gBACT,QAAQ,KAAK,CAAC,gCAAgC;gBAC9C,OAAO;oBAAE,SAAS;oBAAO,OAAO,MAAM,OAAO;gBAAC;YAChD;QACF;QAEA,OAAO;YAAE,SAAS;QAAK;IACzB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,uDAAuD;QACrE,OAAO;YAAE,SAAS;YAAO,OAAO;QAA4B;IAC9D;AACF;AAGO,eAAe,8BACpB,SAAiB,EACjB,UAAkB;IAElB,uCAA2B;;IAG3B;IAEA,IAAI;QACF,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,SACrB,IAAI,CAAC,sBACL,MAAM,CAAC;YACN,SAAS;YACT,YAAY,IAAI,OAAO,WAAW;QACpC,GACC,EAAE,CAAC,cAAc,WACjB,EAAE,CAAC,UAAU;QAEhB,IAAI,OAAO;YACT,QAAQ,KAAK,CAAC,wCAAwC;YACtD,OAAO;gBAAE,SAAS;gBAAO,OAAO,MAAM,OAAO;YAAC;QAChD;QAEA,OAAO;YAAE,SAAS;QAAK;IACzB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,sDAAsD;QACpE,OAAO;YAAE,SAAS;YAAO,OAAO;QAA4B;IAC9D;AACF","debugId":null}},
    {"offset": {"line": 327, "column": 0}, "map": {"version":3,"sources":["file:///F:/project/WebTools/008_headshotGenerator/Photo-Background-Change/src/app/api/remaining/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport { getServerSession } from 'next-auth/next';\r\nimport { getUserUsage, createUserUsage, updateUserUsage, getUserSubscription, updateUserSubscriptionCredits } from '@/lib/supabase';\r\n\r\nconst DAILY_USAGE_LIMIT = 1;\r\n\r\nfunction getTodayKey(): string {\r\n  return new Date().toISOString().split('T')[0];\r\n}\r\n\r\nfunction getTimeLeft() {\r\n  const now = new Date();\r\n  const tomorrow = new Date(now);\r\n  tomorrow.setDate(tomorrow.getDate() + 1);\r\n  tomorrow.setHours(0, 0, 0, 0);\r\n  const diff = tomorrow.getTime() - now.getTime();\r\n  const hours = Math.floor(diff / (1000 * 60 * 60));\r\n  const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));\r\n  return { hours, minutes };\r\n}\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    const session = await getServerSession();\r\n    \r\n    if (!session?.user?.email) {\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\r\n    }\r\n\r\n    const userEmail = session.user.email;\r\n    const todayKey = getTodayKey();\r\n    \r\n    // 检查用户是否有付费订阅\r\n    const subscription = await getUserSubscription(userEmail);\r\n    \r\n    if (subscription && subscription.credits > 0) {\r\n      // 付费用户：返回剩余积分\r\n      return NextResponse.json({\r\n        remainingGenerations: subscription.credits,\r\n        isPaidUser: true,\r\n        planId: subscription.plan_id,\r\n        dailyLimit: subscription.credits,\r\n      });\r\n    } else {\r\n      // 免费用户：使用每日限制\r\n      let userUsage = await getUserUsage(userEmail, todayKey);\r\n      \r\n      if (!userUsage) {\r\n        userUsage = await createUserUsage(userEmail, todayKey);\r\n        if (!userUsage) {\r\n          return NextResponse.json({ error: 'Failed to create user usage record' }, { status: 500 });\r\n        }\r\n      }\r\n\r\n      const remainingGenerations = Math.max(0, DAILY_USAGE_LIMIT - userUsage.usage_count);\r\n      const timeLeft = getTimeLeft();\r\n\r\n      return NextResponse.json({\r\n        remainingGenerations,\r\n        isPaidUser: false,\r\n        hours: timeLeft.hours,\r\n        minutes: timeLeft.minutes,\r\n        dailyLimit: DAILY_USAGE_LIMIT,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    console.error('GET /api/remaining error:', error);\r\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\r\n  }\r\n}\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const session = await getServerSession();\r\n    \r\n    if (!session?.user?.email) {\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\r\n    }\r\n\r\n    const userEmail = session.user.email;\r\n    const todayKey = getTodayKey();\r\n    \r\n    // 检查用户是否有付费订阅\r\n    const subscription = await getUserSubscription(userEmail);\r\n    \r\n    if (subscription && subscription.credits > 0) {\r\n      // 付费用户：扣除积分\r\n      const newCredits = subscription.credits - 1;\r\n      \r\n      // 更新数据库中的积分\r\n      const updateResult = await updateUserSubscriptionCredits(userEmail, newCredits);\r\n      \r\n      if (!updateResult.success) {\r\n        console.error('Failed to update subscription credits:', updateResult.error);\r\n        return NextResponse.json({ error: 'Failed to update credits' }, { status: 500 });\r\n      }\r\n      \r\n      return NextResponse.json({ \r\n        success: true, \r\n        remainingGenerations: newCredits,\r\n        isPaidUser: true\r\n      });\r\n    } else {\r\n      // 免费用户：使用每日限制\r\n      let userUsage = await getUserUsage(userEmail, todayKey);\r\n      \r\n      if (!userUsage) {\r\n        userUsage = await createUserUsage(userEmail, todayKey);\r\n        if (!userUsage) {\r\n          return NextResponse.json({ error: 'Failed to create user usage record' }, { status: 500 });\r\n        }\r\n      }\r\n\r\n      // 检查是否还有剩余次数\r\n      if (userUsage.usage_count >= DAILY_USAGE_LIMIT) {\r\n        return NextResponse.json({ error: 'Daily limit exceeded' }, { status: 429 });\r\n      }\r\n\r\n      // 增加使用次数\r\n      const newCount = userUsage.usage_count + 1;\r\n      const success = await updateUserUsage(userEmail, todayKey, newCount);\r\n      \r\n      if (!success) {\r\n        return NextResponse.json({ error: 'Failed to update usage count' }, { status: 500 });\r\n      }\r\n\r\n      return NextResponse.json({ \r\n        success: true, \r\n        remainingGenerations: Math.max(0, DAILY_USAGE_LIMIT - newCount),\r\n        isPaidUser: false\r\n      });\r\n    }\r\n  } catch (error) {\r\n    console.error('POST /api/remaining error:', error);\r\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\r\n  }\r\n} "],"names":[],"mappings":"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","debugId":null}}]
}